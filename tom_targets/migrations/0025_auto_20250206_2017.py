# Generated by Django 4.2.18 on 2025-02-06 20:17

from django.db import migrations
from django.conf import settings

def get_target_model():
    try:
        custom_class = settings.TARGET_MODEL_CLASS
        return custom_class.split('.')[0], custom_class.split('.')[-1]
    except AttributeError:
        return 'tom_targets', 'BaseTarget'

def remove_public_group(apps, schema_editor):
    target_app, target_model = get_target_model()
    Group = apps.get_model('auth', 'Group')
    Target = apps.get_model(target_app, target_model)
    UserObjectPermission = apps.get_model('guardian', 'UserObjectPermission')
    GroupObjectPermission = apps.get_model('guardian', 'GroupObjectPermission')

    group, _ = Group.objects.get_or_create(name='Public')

    # Delete Target permissions for public group
    GroupObjectPermission.objects.filter(group=group, content_type__model=target_model.lower()).delete()

    # Any remaining permissions means target should be private
    private_group_permissions = GroupObjectPermission.objects.filter(
        content_type__model=target_model.lower()
    )
    private_user_permissions = UserObjectPermission.objects.filter(
        content_type__model=target_model.lower()
    )

    # get a list of target ids that still have permissions
    target_ids = set(
        list(private_group_permissions.values_list('object_pk', flat=True)) \
        + list(private_user_permissions.values_list('object_pk', flat=True))
    )

    # Update targets to private
    Target.objects.filter(pk__in=target_ids).update(permissions='PRIVATE')

    # Delete public group
    group.delete()

def set_all_to_public(apps, schema_editor):
    target_app, target_model = get_target_model()
    Target = apps.get_model(target_app, target_model)
    Target.objects.update(permissions='PUBLIC')

class Migration(migrations.Migration):

    dependencies = [
        ('tom_targets', '0024_basetarget_permissions'),
    ]

    operations = [
        migrations.RunPython(remove_public_group, set_all_to_public),
    ]
